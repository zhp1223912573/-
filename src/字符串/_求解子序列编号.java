package 字符串;

/**
 * @author zhp
 * @date 2022-07-08 22:18
 * 在K数MP据算加法密扩和展数据题压目缩二中常需要对特殊的字符串进行编码。给定的字母表A由26个小写英文字母组成，即
 * A={a, b...z}。该字母表产生的长序字符串是指定字符串中字母从左到右出现的次序与字母在字母表中出现
 * 的次序相同，且每个字符最多出现1次。例如，a，b，ab，bc，xyz等字符串是升序字符串。对字母表A产生
 * 的所有长度不超过6的升序字符串按照字典排列编码如下：a(1)，b(2)，c(3)……，z(26)，ab(27)，
 * ac(28)……对于任意长度不超过16的升序字符串，迅速计算出它在上述字典中的编码。
 * 输入描述：
 * 第1行是一个正整数N，表示接下来共有N行，在接下来的N行中，每行给出一个字符串。输出描述：
 * 输出N行，每行对应于一个字符串编码。
 * 示例1:
 * 输入
 * 3
 * a
 * b
 * ab
 * 输出
 * 1
 * 2
 * 27
 *
 * 简化理解：
 * 给定abcde...xyz包含的字符子序列
 * 求解子序列号
 * 如a为1，b为2，ab为27。
 *
 */
public class _求解子序列编号 {
    /**
     * 我们以字符序列bjv的编号求解过程来分析。
     * 1.求解出长度为1与2的所有字符子序列数量之和；
     * 2.求解出长度为3，且首字符小于b的所有字符，也就是以a开头且长度为3的字符子序列数量之和；
     * 3.求解以非首字符的其他字符为第一字符时，小于该第一字符的所有字符子序列的数量之和。
     *   如bjv，求解小于j大于b且长度为len（原字符长度）-当前字符位置，这里是2的所有子序列和，
     *   以及大于j且小于v长度为1的所有子序列和。
     * 根据上述的分析过程，我们需要两个函数来辅助功能实现，
     * 1：输入字符长度，计算所有该长度的字符子序列数量和。
     * 2：输入字符长度，以及首字母，计算所有该字母开始长度为指定的子字符序列数量和。
     */
    public static int sum(String s){
        if(s==null || s.length()<1){
            return 0;
        }

        char[] chars = s.toCharArray();
        int sum=0;
        int len = s.length();

        //a-z对应1-26
        int first = chars[0]-'a'+1;
        //1.求解出长度为小于len的所有字符子序列数量之和；
        for(int i=1;i<len;i++){
            sum+=f(i);
        }

        // 2.求解出长度为len，且第一个字符小于首字符的所有字符的字符子序列数量之和；
        for(int i=1;i<first;i++) sum +=  g(i, len);

        //3.求解以非首字符的其他字符为第一字符时，小于该第一字符的所有字符子序列的数量之和。
        int pre = first;//记录当前指向的字符的前一个字符
        for(int i=1;i<len;i++){
            int cur = chars[i]-'a'+1;//当前字符
            //对上一个字符的符号到当前字符的符号区间进行子序列数量求和
            for(int j=pre+1;j<cur;j++){
                sum+=g(j,len-i);
            }
            //每计算完一个都要更新pre
            pre = cur;
        }
        return sum+1;
    }

    /**
     * 输入字符长度，以及首字母，计算所有该字母开始长度为指定的子字符序列数量和。
     * @param i
     * @param len
     * @return
     */
    private static int g(int i, int len) {
        //只剩下一个字符，直接返回1
        if(len==1){
            return 1;
        }
        int sum=0;
        //计算以i开头长度为len的所有字符子序列数量
        for(int j=i+1;j<=26;j++){
            //a...的总和=b..+c..+d..+......
            sum+=g(j,len-1);
        }
        return sum;
    }

    /**
     *  输入字符长度，计算所有该长度的字符子序列数量和。
     *
     * 就是以a-z为开头的所有长度为len的字符子序列之和。
     * 需要利用到g函数
     */
    private static int f(int len) {
        int sum=0;
        for(int i=1;i<=26;i++){
            sum+= g(i,len);
        }
        return sum  ;
    }

    public static void main(String[] args) {
        System.out.println(sum("bc"));
    }
}
