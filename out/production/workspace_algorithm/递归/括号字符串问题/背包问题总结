01背包：背包内的物品只能选择一次
    朴素代码
       int n,C;//n个物品，C背包容量
       int []v,w;//v[i]表示第i个物品的价格/体积，w[i]表示第i个物品的价值
       int[][] dp = new int[n+1][C+1];//容器规模
       dp[0][j]//初始化
       for(int i=1;i<=n;i++){
            for(int j=0;j<=C;j++){
                if(j>=v[i-1]) dp[i][j] = Math.max(dp[i-1][j],dp[i-1][j-v[i-1]]+w[i-1]);
                else dp[i][j] = dp[i-1][j]
            }
       }
       return dp[n][C];
    空间优化：
        仅仅使用一维数组来保存，当前状态dp[j]依赖于之前的状态，所以需要从后往前推导
       int n,C;//n个物品，C背包容量
       int []v,w;//v[i]表示第i个物品的价格/体积，w[i]表示第i个物品的价值
       int[] dp = new int[C+1];//容器规模
       dp[j]//初始化
       for(int i=1;i<=n;i++){
            for(int j=C;j>=v[i-1];j--){
                dp[j] = Math.max(dp[j],dp[j-v[i-1]]+w[i-1]);
            }
       }
       return dp[C];


完全背包：背包内的物品可以选择多次，相较于01背包多加入一个表示选择当前物品次数的循环k
    朴素版
         int n,C;//n个物品，C背包容量
         int []v,w;//v[i]表示第i个物品的价格/体积，w[i]表示第i个物品的价值
         int[][] dp = new int[n+1][C+1];//容器规模
         dp[0][j]//初始化
         for(int i=1;i<=n;i++){
              for(int j=0;j<=C;j++){
                  for(int k=0;k<=j/v[i];k++){
                        dp[i][j] = Math.max(dp[i-1][j],dp[i-1][j-k*v[i]]+k*w[i];
                  }
              }
         }
         return dp[n][C];

    优化：与01背包优化相似，但是当前选择方法取决于上一层容量一样dp[i-1][j]与当前层的前面元素dp[i][j-x];
              所以我们需要从前往后推导。
         int n,C;//n个物品，C背包容量
         int []v,w;//v[i]表示第i个物品的价格/体积，w[i]表示第i个物品的价值
         int[][] dp = new int[n+1][C+1];//容器规模
         dp[0][j]//初始化
         for(int i=1;i<=n;i++){
              for(int j=0;j<=C;j++){
                 if(j>=v[i-1]) dp[i][j] = Math.max(dp[i-1][j],dp[i][j-v[i-1]]+w[i-1]);
                 else dp[i][j] = dp[i-1][j];
              }
         }
         return dp[n][C];

    空间优化：
         int n,C;//n个物品，C背包容量
         int []v,w;//v[i]表示第i个物品的价格/体积，w[i]表示第i个物品的价值
         int[] dp = new int[C+1];//容器规模
         dp[j]//初始化
         for(int i=1;i<=n;i++){
              for(int j=v[i-1];j<=C;j++){
                  dp[j] = Math.max(dp[j],dp[j-v[i-1]]+w[i-1]);
              }
         }
         return dp[C];

多重背包：每种物品都有对应的数量
     朴素版
         int n,C;//n个物品，C背包容量
         int []v,w;//v[i]表示第i个物品的价格/体积，w[i]表示第i个物品的价值
         int [] M;//M[i]i号商品的数量
         int[][] dp = new int[n+1][C+1];//容器规模
         dp[0][j]//初始化
         for(int i=1;i<=n;i++){
              for(int j=0;j<=C;j++){
                  for(int k=0;k<=M[i-1];k++){
                        dp[i][j] = Math.max(dp[i-1][j],dp[i-1][j-k*v[i]]+k*w[i];
                  }
              }
         }
         return dp[n][C];


     优化：多重背包转化为01背包问题
           任何一个数都可以使用2的倍数的拼凑出来
           如13=1+2+4+6,37=1+2+4+8+16+6

            int n,C;//n个物品，C背包容量
            int []v,w;//v[i]表示第i个物品的价格/体积，w[i]表示第i个物品的价值
            int [] m;//M[i]i号商品的数量

            Vector<int> V,W;//打包后的v，W
            //将每个商品，打包成为2的倍数个当前商品的物品
            for(int i=0;i<n;i++){
                for(int j=1;j<=m[i];j*=2){
                    m[i]-=j;
                    V.push(v[i]*j);
                    W.push(w[i]*j);
                }
                if(m[i]>0){
                    V.push(v[i]*m[i]);
                    W.push(w[i]*m[i]);
                }
            }
            //打包完成后，就是一个01背包问题
            int dp[] = new int[C+1]
            for(int i=1;i<=V.size();i++){
                for(int j=C;j>=V[i-1];j--){
                    dp[j] = Math.max(dp[j],dp[j-V[i-1]]+W[i-1]);
                }
            }
           return dp[C];


